
div, main {
    overflow: hidden;
    box-sizing: border-box;
}

html {
  overflow: hidden;
  width: 100%;
  height: 100%;
  box-sizing: border-box;
}

:root {
  font-size: 1.5vw;
}

body {
  width: 100%;
  height: 100%;
  position: fixed;
  overflow-y: scroll;
  margin:0;
  --stage-view-border-width: 0px;
  --stage-surface-border-width: 0px;
}

.container {
  width: 100%;
  position: relative;
  width: 100%; 
  height: 1300vh;
}

div {
  box-sizing: border-box;
}

.stage-view {
   /* the fixed frame through which we see the scrolling element (which is the "surface").  */
   pointer-events: none;
   position: fixed;
   bottom: 0;
   left: 0;
   height: 100vh;
   width: 100vw;
   border-style: solid;
   border-color: orange;
   border-width: var(--stage-view-border-width);
   overflow-x: hidden;
}

.stage-surface {
    /* The overflow-er; mobile floor for visual elements*/
    position: absolute;
    overflow: hidden;
    border-style: dashed;
    border-width: var(--stage-surface-border-width);
    border-color: darkgreen;
}

.stage-surface {
    /* The overflow-er; mobile floor for visual elements*/
    width: 200%;
    height: 300%;
}

.paper {
    font-family: helvetica, arial;
    font-size: 200%;    
    position: absolute;
    background-color: white;
    opacity: .86;
    width: 80vw;
    min-height: 0;
    bottom: calc(150vh - var(--stage-view-border-width) - var(--stage-surface-border-width));
    height: 100vh;
}

.paper > h1 {
    display: block;
    margin-top: 2vh;
}

.from-right > .stage-surface > .paper {
    left: 100vw;    
}

.from-left > .stage-surface > .paper {
    right: 100vw;
    display: flex;
    flex-direction: column;
    text-align: right;
}

@media(orientation: landscape) {    
    .paper > h1 {
	font-size: max(5rem, 20vh);
    }        
}

@media(orientation: portrait) {    
    .paper > h1 {
	display: block;
	font-size: max(5rem, 20vw);
	margin-top: 2vh;
    }        
}

.body-bground > img.body-bground-img {
    pointer-events: none;
    width: 100%;
    height: auto;
    position: fixed;
}

